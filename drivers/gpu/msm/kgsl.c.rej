--- drivers/gpu/msm/kgsl.c
+++ drivers/gpu/msm/kgsl.c
@@ -1,4 +1,4 @@
-/* Copyright (c) 2008-2010, Code Aurora Forum. All rights reserved.
+/* Copyright (c) 2008-2011, Code Aurora Forum. All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 and
@@ -50,9 +50,6 @@
 #include "kgsl_log.h"
 #include "kgsl_drm.h"
 
-#define KGSL_MAX_PRESERVED_BUFFERS		10
-#define KGSL_MAX_SIZE_OF_PRESERVED_BUFFER	0x10000
-
 
 static void kgsl_put_phys_file(struct file *file);
 
@@ -64,25 +61,22 @@
 	return KGSL_SUCCESS;
 }
 
-static void kgsl_runpending_all(void)
+static int kgsl_runpending_unlocked(struct kgsl_device *device)
 {
-	struct kgsl_device *device;
-	int i;
+	int ret;
 
-	for (i = 0; i < KGSL_DEVICE_MAX; i++) {
-		device = kgsl_driver.devp[i];
-		if (device != NULL)
-			kgsl_runpending(device);
-	}
-	return;
+	mutex_lock(&kgsl_driver.mutex);
+	ret = kgsl_runpending(device);
+	mutex_unlock(&kgsl_driver.mutex);
+
+	return ret;
 }
 
-static void kgsl_clean_cache_all(struct kgsl_file_private *private)
+static void kgsl_clean_cache_all(struct kgsl_process_private *private)
 {
 	struct kgsl_mem_entry *entry = NULL;
 
-	kgsl_runpending_all();
-
+	spin_lock(&private->mem_lock);
 	list_for_each_entry(entry, &private->mem_list, list) {
 		if (KGSL_MEMFLAGS_CACHE_MASK & entry->memdesc.priv) {
 			    kgsl_cache_range_op((unsigned long)entry->
@@ -164,7 +159,6 @@
 
 	if (flags && device->ftbl.device_setstate) {
 		status = device->ftbl.device_setstate(device, flags);
-		device->mmu.tlb_flags &= ~flags;
 	} else
 		status = 0;
 
@@ -463,91 +457,80 @@
 }
 
 /* file operations */
-static struct kgsl_file_private *
+static struct kgsl_process_private *
 kgsl_get_process_private(struct kgsl_device_private *cur_dev_priv)
 {
-	struct kgsl_device_private *dev_priv;
-	struct kgsl_file_private *private;
+	struct kgsl_process_private *private;
 
-	list_for_each_entry(dev_priv, &kgsl_driver.dev_priv_list, list) {
-		if ((dev_priv->pid == task_pid_nr(current)) &&
-					(dev_priv != cur_dev_priv)) {
-			private = dev_priv->process_priv;
+	list_for_each_entry(private, &kgsl_driver.process_list, list) {
+		if (private->pid == task_tgid_nr(current)) {
 			private->refcnt++;
-			return private;
+			goto out;
 		}
 	}
 
 	/* no existing process private found for this dev_priv, create one */
-	private = kzalloc(sizeof(struct kgsl_file_private), GFP_KERNEL);
-	if (private == NULL)
+	private = kzalloc(sizeof(struct kgsl_process_private), GFP_KERNEL);
+	if (private == NULL) {
 		KGSL_DRV_ERR("Error: cannot allocate process private data\n");
-	else
-		private->refcnt = 1;
-	return private;
-}
-
-static int
-kgsl_init_process_private(struct kgsl_file_private *private)
-{
-	int result = 0;
-#ifdef CONFIG_MSM_KGSL_MMU
-	struct kgsl_device *device = NULL;
-	unsigned long pt_name;
-#endif
+		goto out;
+	}
 
-       /* only initialize it once */
-	if (private->refcnt != 1)
-		return result;
+	spin_lock_init(&private->mem_lock);
+	private->refcnt = 1;
+	private->pid = task_tgid_nr(current);
 
 	INIT_LIST_HEAD(&private->mem_list);
-	INIT_LIST_HEAD(&private->preserve_entry_list);
-	private->preserve_list_size = 0;
 
 #ifdef CONFIG_MSM_KGSL_MMU
+	{
+		struct kgsl_device *device;
+		unsigned long pt_name;
+
 #ifdef CONFIG_KGSL_PER_PROCESS_PAGE_TABLE
-	pt_name = task_pid_nr(current);
+		pt_name = task_tgid_nr(current);
 #else
-	pt_name = KGSL_MMU_GLOBAL_PT;
+		pt_name = KGSL_MMU_GLOBAL_PT;
 #endif
-	device = kgsl_get_device(KGSL_DEVICE_YAMATO);
-	private->pagetable = kgsl_mmu_getpagetable(&device->mmu, pt_name);
-	if (private->pagetable == NULL)
-		return -ENOMEM;
-	private->vmalloc_size = 0;
+		device = kgsl_get_device(KGSL_DEVICE_YAMATO);
+		private->pagetable = kgsl_mmu_getpagetable(&device->mmu,
+							   pt_name);
+		if (private->pagetable == NULL) {
+			KGSL_DRV_ERR("Error: Unable to get the page table\n");
+			kfree(private);
+			private = NULL;
+		}
+	}
 #endif
-	return result;
+
+	list_add(&private->list, &kgsl_driver.process_list);
+out:
+	return private;
 }
 
-static void kgsl_cleanup_process_private(struct kgsl_file_private *private)
+static void
+kgsl_put_process_private(struct kgsl_device *device,
+			 struct kgsl_process_private *private)
 {
-	struct kgsl_mem_entry *entry, *entry_tmp;
+	struct kgsl_mem_entry *entry = NULL;
+	struct kgsl_mem_entry *entry_tmp = NULL;
 
-	list_for_each_entry_safe(entry, entry_tmp, &private->mem_list, list)
-		kgsl_remove_mem_entry(entry, false);
+	if (--private->refcnt)
+		return;
 
-	entry = NULL;
-	entry_tmp = NULL;
-	list_for_each_entry_safe(entry, entry_tmp,
-			&private->preserve_entry_list, list)
-		kgsl_remove_mem_entry(entry, false);
+	list_del(&private->list);
+
+	list_for_each_entry_safe(entry, entry_tmp, &private->mem_list, list) {
+		list_del(&entry->list);
+		kgsl_destroy_mem_entry(entry);
+	}
 
 #ifdef CONFIG_MSM_KGSL_MMU
-	if (private->pagetable != NULL) {
+	if (private->pagetable != NULL)
 		kgsl_mmu_putpagetable(private->pagetable);
-		private->pagetable = NULL;
-	}
 #endif
-	return;
-}
 
-static void kgsl_put_process_private(struct kgsl_device *device,
-					struct kgsl_file_private *private)
-{
-	if (private->refcnt-- == 1) {
-		kgsl_cleanup_process_private(private);
-		kfree(private);
-	}
+	kfree(private);
 }
 
 static int kgsl_release(struct inode *inodep, struct file *filep)
@@ -555,7 +538,7 @@
 	int result = 0;
 	unsigned int i = 0;
 	struct kgsl_device_private *dev_priv = NULL;
-	struct kgsl_file_private *private = NULL;
+	struct kgsl_process_private *private = NULL;
 	struct kgsl_device *device;
 
 	device = kgsl_driver.devp[iminor(inodep)];
@@ -570,14 +553,10 @@
 	private = dev_priv->process_priv;
 	BUG_ON(private == NULL);
 	filep->private_data = NULL;
-	list_del(&dev_priv->list);
 
-	while (dev_priv->ctxt_id_mask) {
-		if (dev_priv->ctxt_id_mask & (1 << i)) {
+	for (i = 0; i < KGSL_CONTEXT_MAX; i++) {
+		if (test_bit(i, dev_priv->ctxt_bitmap))
 			device->ftbl.device_drawctxt_destroy(device, i);
-			dev_priv->ctxt_id_mask &= ~(1 << i);
-		}
-		i++;
 	}
 
 	kgsl_put_process_private(device, private);
@@ -587,6 +566,11 @@
 		result = device->ftbl.device_stop(device);
 	}
 
+	/* clean up any to-be-freed entries that belong to this
+	 * process and this device
+	 */
+	kgsl_cmdstream_memqueue_cleanup(device, private);
+
 	KGSL_POST_HWACCESS();
 	kfree(dev_priv);
 
@@ -636,13 +620,10 @@
 
 	mutex_lock(&kgsl_driver.mutex);
 
-	dev_priv->ctxt_id_mask = 0;
+	bitmap_zero(dev_priv->ctxt_bitmap, KGSL_CONTEXT_MAX);
 	dev_priv->device = device;
-	dev_priv->pid = task_pid_nr(current);
 	filep->private_data = dev_priv;
 
-	list_add(&dev_priv->list, &kgsl_driver.dev_priv_list);
-
 	/* Get file (per process) private struct */
 	dev_priv->process_priv = kgsl_get_process_private(dev_priv);
 	if (dev_priv->process_priv ==  NULL) {
@@ -660,8 +641,6 @@
 		}
 	}
 
-	result = kgsl_init_process_private(dev_priv->process_priv);
-
 done:
 	mutex_unlock(&kgsl_driver.mutex);
 	if (result != 0)
@@ -669,9 +648,9 @@
 	return result;
 }
 
-/*call with driver locked */
+/*call with private->mem_lock locked */
 static struct kgsl_mem_entry *
-kgsl_sharedmem_find(struct kgsl_file_private *private, unsigned int gpuaddr)
+kgsl_sharedmem_find(struct kgsl_process_private *private, unsigned int gpuaddr)
 {
 	struct kgsl_mem_entry *entry = NULL, *result = NULL;
 
@@ -686,9 +665,9 @@
 	return result;
 }
 
-/*call with driver locked */
+/*call with private->mem_lock locked */
 struct kgsl_mem_entry *
-kgsl_sharedmem_find_region(struct kgsl_file_private *private,
+kgsl_sharedmem_find_region(struct kgsl_process_private *private,
 				unsigned int gpuaddr,
 				size_t size)
 {
@@ -776,51 +755,73 @@
 }
 
 static long kgsl_ioctl_rb_issueibcmds(struct kgsl_device_private *dev_priv,
-				     void __user *arg)
+                                     void __user *arg)
 {
-	int result = 0;
-	struct kgsl_ringbuffer_issueibcmds param;
+        int result = 0;
+        struct kgsl_ringbuffer_issueibcmds param;
+	struct kgsl_mem_entry *entry;
 
-	if (copy_from_user(&param, arg, sizeof(param))) {
-		result = -EFAULT;
-		goto done;
-	}
+        if (copy_from_user(&param, arg, sizeof(param))) {
+                result = -EFAULT;
+                goto done;
+        }
+
+        if (!test_bit(param.drawctxt_id, dev_priv->ctxt_bitmap)) {
+                result = -EINVAL;
+                KGSL_DRV_ERR("invalid drawctxt drawctxt_id %d\n",
+                                      param.drawctxt_id);
+                goto done;
+        }
+
+	spin_lock(&dev_priv->process_priv->mem_lock);
+	entry = kgsl_sharedmem_find_region(dev_priv->process_priv,
+			param.ibaddr,
+			param.sizedwords*sizeof(uint32_t));
+	spin_unlock(&dev_priv->process_priv->mem_lock);
+
+	if(entry == NULL) {
+		KGSL_DRV_ERR("invalid cmd buffer ibaddr %08x " \
+				"sizedwords %d\n",
+				param.ibaddr, param.sizedwords);
 
-	if ((dev_priv->ctxt_id_mask & 1 << param.drawctxt_id) == 0) {
 		result = -EINVAL;
-		KGSL_DRV_ERR("invalid drawctxt drawctxt_id %d\n",
-				      param.drawctxt_id);
 		goto done;
 	}
 
-	if (kgsl_sharedmem_find_region(dev_priv->process_priv,
-				param.ibaddr,
-				param.sizedwords*sizeof(uint32_t)) == NULL) {
-		KGSL_DRV_ERR("invalid cmd buffer ibaddr %08x " \
-					"sizedwords %d\n",
-					param.ibaddr, param.sizedwords);
-		result = -EINVAL;
-		goto done;
-	}
+        result = dev_priv->device->ftbl.device_issueibcmds(dev_priv,
+                                             param.drawctxt_id,
+                                             param.ibaddr,
+                                             param.sizedwords,
+                                             &param.timestamp,
+                                             param.flags);
 
-	result = dev_priv->device->ftbl.device_issueibcmds(dev_priv,
-					     param.drawctxt_id,
-					     param.ibaddr,
-					     param.sizedwords,
-					     &param.timestamp,
-					     param.flags);
+        if (result != 0)
+                goto done;
 
-	if (result != 0)
-		goto done;
+	spin_lock(&dev_priv->process_priv->mem_lock);
+	entry = kgsl_sharedmem_find_region(dev_priv->process_priv,
+			param.ibaddr,
+			param.sizedwords*sizeof(uint32_t));
+	spin_unlock(&dev_priv->process_priv->mem_lock);
 
-	if (copy_to_user(arg, &param, sizeof(param))) {
-		result = -EFAULT;
+	if(entry == NULL) {
+		KGSL_DRV_ERR("invalid cmd buffer ibaddr AFTER issue %08x " \
+				"sizedwords %d\n",
+				param.ibaddr, param.sizedwords);
+
+		result = -EINVAL;
 		goto done;
 	}
+
+        if (copy_to_user(arg, &param, sizeof(param))) {
+                result = -EFAULT;
+                goto done;
+        }
 done:
-	return result;
+        return result;
 }
 
+
 static long kgsl_ioctl_cmdstream_readtimestamp(struct kgsl_device_private
 						*dev_priv, void __user *arg)
 {
@@ -859,22 +860,24 @@
 		goto done;
 	}
 
+	spin_lock(&dev_priv->process_priv->mem_lock);
 	entry = kgsl_sharedmem_find(dev_priv->process_priv, param.gpuaddr);
-	if (entry == NULL) {
+	if (entry)
+		list_del(&entry->list);
+	spin_unlock(&dev_priv->process_priv->mem_lock);
+
+	if (entry) {
+#ifdef CONFIG_MSM_KGSL_MMU
+		if (entry->memdesc.priv & KGSL_MEMFLAGS_VMALLOC_MEM)
+			entry->memdesc.priv &= ~KGSL_MEMFLAGS_CACHE_MASK;
+#endif
+		kgsl_cmdstream_freememontimestamp(dev_priv->device, entry,
+						  param.timestamp, param.type);
+		kgsl_runpending(dev_priv->device);
+	} else {
 		KGSL_DRV_ERR("invalid gpuaddr %08x\n", param.gpuaddr);
 		result = -EINVAL;
-		goto done;
 	}
-#ifdef CONFIG_MSM_KGSL_MMU
-	if (entry->memdesc.priv & KGSL_MEMFLAGS_VMALLOC_MEM)
-		entry->memdesc.priv &= ~KGSL_MEMFLAGS_CACHE_MASK;
-#endif
-	result = kgsl_cmdstream_freememontimestamp(dev_priv->device,
-							entry,
-							param.timestamp,
-							param.type);
-
-	kgsl_runpending(dev_priv->device);
 done:
 	return result;
 }
@@ -901,7 +904,7 @@
 		goto done;
 	}
 
-	dev_priv->ctxt_id_mask |= 1 << param.drawctxt_id;
+	set_bit(param.drawctxt_id, dev_priv->ctxt_bitmap);
 
 done:
 	return result;
@@ -918,7 +921,7 @@
 		goto done;
 	}
 
-	if ((dev_priv->ctxt_id_mask & 1 << param.drawctxt_id) == 0) {
+	if (!test_bit(param.drawctxt_id, dev_priv->ctxt_bitmap)) {
 		result = -EINVAL;
 		goto done;
 	}
@@ -927,56 +930,29 @@
 							dev_priv->device,
 							param.drawctxt_id);
 	if (result == 0)
-		dev_priv->ctxt_id_mask &= ~(1 << param.drawctxt_id);
+		clear_bit(param.drawctxt_id, dev_priv->ctxt_bitmap);
 
 done:
 	return result;
 }
 
-void kgsl_remove_mem_entry(struct kgsl_mem_entry *entry, bool preserve)
+void kgsl_destroy_mem_entry(struct kgsl_mem_entry *entry)
 {
-	/* If allocation is vmalloc and preserve is requested then save
-	* the allocation in a free list to be used later instead of
-	* freeing it here */
-	if (KGSL_MEMFLAGS_VMALLOC_MEM & entry->memdesc.priv &&
-		preserve &&
-		entry->priv->preserve_list_size < KGSL_MAX_PRESERVED_BUFFERS &&
-		entry->memdesc.size <= KGSL_MAX_SIZE_OF_PRESERVED_BUFFER) {
-		if (entry->free_list.prev) {
-			list_del(&entry->free_list);
-			entry->free_list.prev = NULL;
-		}
-		if (entry->list.prev) {
-			list_del(&entry->list);
-			entry->list.prev = NULL;
-		}
-		list_add(&entry->list, &entry->priv->preserve_entry_list);
-		entry->priv->preserve_list_size++;
-		return;
-	}
 	kgsl_mmu_unmap(entry->memdesc.pagetable,
 			entry->memdesc.gpuaddr & KGSL_PAGEMASK,
 			entry->memdesc.size);
-	if (KGSL_MEMFLAGS_VMALLOC_MEM & entry->memdesc.priv) {
+	if (KGSL_MEMFLAGS_VMALLOC_MEM & entry->memdesc.priv)
 		vfree((void *)entry->memdesc.physaddr);
-		entry->priv->vmalloc_size -= entry->memdesc.size;
-	} else if (KGSL_MEMFLAGS_HOSTADDR & entry->memdesc.priv &&
+	else if (KGSL_MEMFLAGS_HOSTADDR & entry->memdesc.priv &&
 			entry->file_ptr)
 		put_ashmem_file(entry->file_ptr);
 	else
 		kgsl_put_phys_file(entry->file_ptr);
 
-	/* remove the entry from list and free_list if it exists */
-	if (entry->list.prev)
-		list_del(&entry->list);
-	if (entry->free_list.prev)
-		list_del(&entry->free_list);
-
 	kfree(entry);
-
 }
 
-static long kgsl_ioctl_sharedmem_free(struct kgsl_file_private *private,
+static long kgsl_ioctl_sharedmem_free(struct kgsl_process_private *private,
 				     void __user *arg)
 {
 	int result = 0;
@@ -987,15 +963,19 @@
 		result = -EFAULT;
 		goto done;
 	}
+
+	spin_lock(&private->mem_lock);
 	entry = kgsl_sharedmem_find(private, param.gpuaddr);
+	if (entry)
+		list_del(&entry->list);
+	spin_unlock(&private->mem_lock);
 
-	if (entry == NULL) {
+	if (entry) {
+		kgsl_destroy_mem_entry(entry);
+	} else {
 		KGSL_DRV_ERR("invalid gpuaddr %08x\n", param.gpuaddr);
 		result = -EINVAL;
-		goto done;
 	}
-
-	kgsl_remove_mem_entry(entry, false);
 done:
 	return result;
 }
@@ -1029,12 +1009,13 @@
 }
 
 #ifdef CONFIG_MSM_KGSL_MMU
-static long kgsl_ioctl_sharedmem_from_vmalloc(struct kgsl_file_private *private,
-					      void __user *arg)
+static long
+kgsl_ioctl_sharedmem_from_vmalloc(struct kgsl_process_private *private,
+				  void __user *arg)
 {
-	int result = 0, len, found = 0;
+	int result = 0, len = 0;
 	struct kgsl_sharedmem_from_vmalloc param;
-	struct kgsl_mem_entry *entry = NULL, *entry_tmp = NULL;
+	struct kgsl_mem_entry *entry = NULL;
 	void *vmalloc_area;
 	struct vm_area_struct *vma;
 
@@ -1058,63 +1039,39 @@
 	}
 	len = vma->vm_end - vma->vm_start;
 
-	list_for_each_entry_safe(entry, entry_tmp,
-				&private->preserve_entry_list, list) {
-		/* make sure that read only pages aren't accidently
-		 * used when read-write pages are requested
-		 */
-		if (entry->memdesc.size == len &&
-		    ((entry->memdesc.priv & KGSL_MEMFLAGS_GPUREADONLY) ==
-		    (param.flags & KGSL_MEMFLAGS_GPUREADONLY))) {
-			list_del(&entry->list);
-			found = 1;
-			break;
-		}
+	entry = kzalloc(sizeof(struct kgsl_mem_entry), GFP_KERNEL);
+	if (entry == NULL) {
+		result = -ENOMEM;
+		goto error;
 	}
 
-	if (!found) {
-		entry = kzalloc(sizeof(struct kgsl_mem_entry), GFP_KERNEL);
-		if (entry == NULL) {
-			result = -ENOMEM;
-			goto error;
-		}
+	/* allocate memory and map it to user space */
+	vmalloc_area = vmalloc_user(len);
+	if (!vmalloc_area) {
+		KGSL_MEM_ERR("vmalloc failed\n");
+		result = -ENOMEM;
+		goto error_free_entry;
+	}
+	kgsl_cache_range_op((unsigned int)vmalloc_area, len,
+		KGSL_MEMFLAGS_CACHE_INV | KGSL_MEMFLAGS_VMALLOC_MEM);
 
-		/* allocate memory and map it to user space */
-		vmalloc_area = vmalloc_user(len);
-		if (!vmalloc_area) {
-			KGSL_MEM_ERR("vmalloc failed\n");
-			result = -ENOMEM;
-			goto error_free_entry;
-		}
-		kgsl_cache_range_op((unsigned int)vmalloc_area, len,
-			KGSL_MEMFLAGS_CACHE_INV | KGSL_MEMFLAGS_VMALLOC_MEM);
+	result = kgsl_mmu_map(private->pagetable,
+			      (unsigned long)vmalloc_area, len,
+			      GSL_PT_PAGE_RV |
+			      ((param.flags & KGSL_MEMFLAGS_GPUREADONLY) ?
+			      0 : GSL_PT_PAGE_WV),
+			      &entry->memdesc.gpuaddr, KGSL_MEMFLAGS_ALIGN4K |
+			      KGSL_MEMFLAGS_VMALLOC_MEM);
+	if (result != 0)
+		goto error_free_vmalloc;
 
-		result =
-		    kgsl_mmu_map(private->pagetable,
-			(unsigned long)vmalloc_area, len,
-			GSL_PT_PAGE_RV |
-			((param.flags & KGSL_MEMFLAGS_GPUREADONLY) ?
-			0 : GSL_PT_PAGE_WV),
-			&entry->memdesc.gpuaddr, KGSL_MEMFLAGS_ALIGN4K |
-						KGSL_MEMFLAGS_VMALLOC_MEM);
-		if (result != 0)
-			goto error_free_vmalloc;
-
-		entry->memdesc.pagetable = private->pagetable;
-		entry->memdesc.size = len;
-		entry->memdesc.priv = KGSL_MEMFLAGS_VMALLOC_MEM |
+	entry->memdesc.pagetable = private->pagetable;
+	entry->memdesc.size = len;
+	entry->memdesc.priv = KGSL_MEMFLAGS_VMALLOC_MEM |
 			    KGSL_MEMFLAGS_CACHE_CLEAN |
 			    (param.flags & KGSL_MEMFLAGS_GPUREADONLY);
-		entry->memdesc.physaddr = (unsigned long)vmalloc_area;
-		entry->priv = private;
-		private->vmalloc_size += len;
-
-	} else {
-		KGSL_MEM_INFO("Reusing memory entry: %x, size: %x\n",
-				(unsigned int)entry, entry->memdesc.size);
-		entry->priv->preserve_list_size--;
-		vmalloc_area = (void *)entry->memdesc.physaddr;
-	}
+	entry->memdesc.physaddr = (unsigned long)vmalloc_area;
+	entry->priv = private;
 
 	if (!kgsl_cache_enable)
 		vma->vm_page_prot = pgprot_writecombine(vma->vm_page_prot);
@@ -1133,7 +1090,9 @@
 		result = -EFAULT;
 		goto error_unmap_entry;
 	}
+	spin_lock(&private->mem_lock);
 	list_add(&entry->list, &private->mem_list);
+	spin_unlock(&private->mem_lock);
 
 	return 0;
 
@@ -1190,7 +1149,7 @@
 		put_pmem_file(file);
 }
 
-static int kgsl_ioctl_map_user_mem(struct kgsl_file_private *private,
+static int kgsl_ioctl_map_user_mem(struct kgsl_process_private *private,
 						void __user *arg,
 						unsigned int cmd)
 {
@@ -1329,6 +1288,7 @@
 		result = -EINVAL;
 		goto error_unmap_entry;
 	}
+	entry->priv = private;
 	entry->memdesc.gpuaddr = total_offset;
 	param.gpuaddr = entry->memdesc.gpuaddr;
 
@@ -1342,7 +1302,9 @@
 		result = -EFAULT;
 		goto error_unmap_entry;
 	}
+	spin_lock(&private->mem_lock);
 	list_add(&entry->list, &private->mem_list);
+	spin_unlock(&private->mem_lock);
 	return result;
 
 error_unmap_entry:
@@ -1365,8 +1327,9 @@
 #ifdef CONFIG_MSM_KGSL_MMU
 /*This function flushes a graphics memory allocation from CPU cache
  *when caching is enabled with MMU*/
-static long kgsl_ioctl_sharedmem_flush_cache(struct kgsl_file_private *private,
-				       void __user *arg)
+static long
+kgsl_ioctl_sharedmem_flush_cache(struct kgsl_process_private *private,
+				 void __user *arg)
 {
 	int result = 0;
 	struct kgsl_mem_entry *entry;
@@ -1377,23 +1340,71 @@
 		goto done;
 	}
 
+	spin_lock(&private->mem_lock);
 	entry = kgsl_sharedmem_find(private, param.gpuaddr);
 	if (!entry) {
 		KGSL_DRV_ERR("invalid gpuaddr %08x\n", param.gpuaddr);
 		result = -EINVAL;
-		goto done;
+	} else {
+		kgsl_cache_range_op((unsigned long)entry->memdesc.hostptr,
+				    entry->memdesc.size,
+				    KGSL_MEMFLAGS_CACHE_CLEAN |
+				    KGSL_MEMFLAGS_HOSTADDR);
+		/* Mark memory as being flushed so we don't flush it again */
+		entry->memdesc.priv &= ~KGSL_MEMFLAGS_CACHE_MASK;
 	}
-	kgsl_cache_range_op((unsigned long)entry->memdesc.hostptr,
-				entry->memdesc.size,
-				KGSL_MEMFLAGS_CACHE_CLEAN |
-				KGSL_MEMFLAGS_HOSTADDR);
-	/* Mark memory as being flushed so we don't flush it again */
-	entry->memdesc.priv &= ~KGSL_MEMFLAGS_CACHE_MASK;
+	spin_unlock(&private->mem_lock);
 done:
 	return result;
 }
 #endif /*CONFIG_MSM_KGSL_MMU*/
 
+static long
+kgsl_memory_ioctl(struct kgsl_device_private *dev_priv,
+		  unsigned int cmd, unsigned long arg)
+{
+	struct kgsl_device *device = dev_priv->device;
+	int result = 0;
+
+	switch (cmd) {
+#ifdef CONFIG_MSM_KGSL_MMU
+	case IOCTL_KGSL_SHAREDMEM_FROM_VMALLOC:
+		kgsl_runpending_unlocked(device);
+
+		result = kgsl_ioctl_sharedmem_from_vmalloc(
+			dev_priv->process_priv,
+			(void __user *)arg);
+
+		break;
+
+	case IOCTL_KGSL_SHAREDMEM_FLUSH_CACHE:
+		if(kgsl_cache_enable)
+			result = kgsl_ioctl_sharedmem_flush_cache(
+					dev_priv->process_priv,
+					(void __user *)arg);
+		break;
+#endif
+	case IOCTL_KGSL_SHAREDMEM_FROM_PMEM:
+	case IOCTL_KGSL_MAP_USER_MEM:
+		kgsl_runpending_unlocked(device);
+		result = kgsl_ioctl_map_user_mem(dev_priv->process_priv,
+						 (void __user *)arg,
+						 cmd);
+		break;
+
+	case IOCTL_KGSL_SHAREDMEM_FREE:
+		result = kgsl_ioctl_sharedmem_free(dev_priv->process_priv,
+						   (void __user *)arg);
+		break;
+
+	default:
+		result = -EINVAL;
+		break;
+	}
+
+	return result;
+}
+
 static long kgsl_ioctl(struct file *filep, unsigned int cmd, unsigned long arg)
 {
 	int result = 0;
@@ -1408,6 +1419,17 @@
 
 	KGSL_DRV_VDBG("filep %p cmd 0x%08x arg 0x%08lx\n", filep, cmd, arg);
 
+	/* Memory related functions don't always rely on locking hardware,
+	   so it is cleanest to handle them seperately without a lot of
+	   nasty if statements in this function */
+
+	if (cmd == IOCTL_KGSL_SHAREDMEM_FROM_VMALLOC ||
+			cmd == IOCTL_KGSL_SHAREDMEM_FROM_PMEM ||
+			cmd == IOCTL_KGSL_MAP_USER_MEM ||
+			cmd == IOCTL_KGSL_SHAREDMEM_FLUSH_CACHE ||
+			cmd == IOCTL_KGSL_SHAREDMEM_FREE)
+		return kgsl_memory_ioctl(dev_priv, cmd, arg);
+
 	mutex_lock(&kgsl_driver.mutex);
 
 	switch (cmd) {
@@ -1466,36 +1488,6 @@
 		    kgsl_ioctl_drawctxt_destroy(dev_priv, (void __user *)arg);
 		break;
 
-	case IOCTL_KGSL_SHAREDMEM_FREE:
-		result = kgsl_ioctl_sharedmem_free(dev_priv->process_priv,
-							(void __user *)arg);
-		break;
-
-#ifdef CONFIG_MSM_KGSL_MMU
-	case IOCTL_KGSL_SHAREDMEM_FROM_VMALLOC:
-		kgsl_runpending_all();
-		result = kgsl_ioctl_sharedmem_from_vmalloc(
-							dev_priv->process_priv,
-							   (void __user *)arg);
-		break;
-	case IOCTL_KGSL_SHAREDMEM_FLUSH_CACHE:
-		if (kgsl_cache_enable)
-			result =
-			    kgsl_ioctl_sharedmem_flush_cache(
-							dev_priv->process_priv,
-						       (void __user *)arg);
-		break;
-#endif
-	case IOCTL_KGSL_SHAREDMEM_FROM_PMEM:
-	case IOCTL_KGSL_MAP_USER_MEM:
-		kgsl_runpending_all();
-		result = kgsl_ioctl_map_user_mem(dev_priv->process_priv,
-							(void __user *)arg,
-							cmd);
-		break;
-
-
-
 	default:
 		/* call into device specific ioctls */
 		result = device->ftbl.device_ioctl(dev_priv, cmd, arg);
@@ -1538,7 +1530,7 @@
 		result = -EINVAL;
 		goto done;
 	}
-	vma->vm_page_prot = pgprot_noncached(vma->vm_page_prot);
+	vma->vm_page_prot = pgprot_writecombine(vma->vm_page_prot);
 
 	result = remap_pfn_range(vma, vma->vm_start, vma->vm_pgoff,
 				vma_size, vma->vm_page_prot);
@@ -1768,6 +1760,69 @@
 	return err;
 }
 
+static void
+kgsl_ptpool_cleanup(void)
+{
+	int size = kgsl_driver.ptpool.entries * kgsl_driver.ptsize;
+
+	if (kgsl_driver.ptpool.hostptr)
+		dma_free_coherent(NULL, size, kgsl_driver.ptpool.hostptr,
+				  kgsl_driver.ptpool.physaddr);
+
+
+	kfree(kgsl_driver.ptpool.bitmap);
+
+	memset(&kgsl_driver.ptpool, 0, sizeof(kgsl_driver.ptpool));
+}
+
+/* Allocate memory and structures for the pagetable pool */
+
+static int __devinit
+kgsl_ptpool_init(void)
+{
+	int size = kgsl_driver.ptpool.entries * kgsl_driver.ptsize;
+
+	if (size > SZ_4M) {
+		size = SZ_4M;
+		kgsl_driver.ptpool.entries = SZ_4M / kgsl_driver.ptsize;
+		KGSL_DRV_ERR("Pagetable pool too big.  Limiting to "
+			"%d processes\n", kgsl_driver.ptpool.entries);
+	}
+
+	/* Allocate a large chunk of memory for the page tables */
+
+	kgsl_driver.ptpool.hostptr =
+		dma_alloc_coherent(NULL, size, &kgsl_driver.ptpool.physaddr,
+				   GFP_KERNEL);
+
+	if (kgsl_driver.ptpool.hostptr == NULL) {
+		KGSL_DRV_ERR("pagetable init failed\n");
+		return -ENOMEM;
+	}
+
+	/* Allocate room for the bitmap */
+
+	kgsl_driver.ptpool.bitmap =
+		kzalloc((kgsl_driver.ptpool.entries / BITS_PER_BYTE) + 1,
+			GFP_KERNEL);
+
+	if (kgsl_driver.ptpool.bitmap == NULL) {
+		KGSL_DRV_ERR("pagetable init failed\n");
+		dma_free_coherent(NULL, size, kgsl_driver.ptpool.hostptr,
+				  kgsl_driver.ptpool.physaddr);
+		return -ENOMEM;
+	}
+
+	/* Clear the memory at init time - this saves us having to do
+	   it as page tables are allocated */
+
+	memset(kgsl_driver.ptpool.hostptr, 0, size);
+
+	spin_lock_init(&kgsl_driver.ptpool.lock);
+
+	return 0;
+}
+
 static int __devinit kgsl_platform_probe(struct platform_device *pdev)
 {
 	int i, result = 0;
@@ -1783,7 +1838,7 @@
 		kgsl_driver.devp[i] = NULL;
 	}
 	kgsl_driver.num_devs = 0;
-	INIT_LIST_HEAD(&kgsl_driver.dev_priv_list);
+	INIT_LIST_HEAD(&kgsl_driver.process_list);
 	/*acquire clocks */
 	BUG_ON(kgsl_driver.yamato_grp_clk != NULL);
 	BUG_ON(kgsl_driver.g12_grp_clk != NULL);
@@ -1819,10 +1874,11 @@
 		kgsl_driver.yamato_reg = NULL;
 
 	/* put the AXI bus into asynchronous mode with the graphics cores */
-	if ((pdata->set_grp3d_async != NULL) &&
-		(pdata->max_grp3d_freq) &&
-		(!pdata->set_grp3d_async())) {
-		clk_set_rate(clk, pdata->max_grp3d_freq);
+	if (pdata != NULL) {
+		if ((pdata->set_grp3d_async != NULL) &&
+			(pdata->max_grp3d_freq) &&
+			(!pdata->set_grp3d_async()))
+			clk_set_rate(clk, pdata->max_grp3d_freq);
 	}
 
 	if (pdata->imem_clk_name != NULL) {
@@ -1864,7 +1920,7 @@
 	kgsl_driver.g12_grp_pclk = NULL;
 #endif
 
-	if (clk != NULL) {
+	if (pdata != NULL && clk != NULL) {
 		if ((pdata->set_grp2d_async != NULL) &&
 			(pdata->max_grp2d_freq) &&
 			(!pdata->set_grp2d_async()))
@@ -1873,23 +1929,25 @@
 
 	kgsl_driver.power_flags = 0;
 
-	kgsl_driver.clk_freq[KGSL_AXI_HIGH_3D] = pdata->high_axi_3d;
-	kgsl_driver.clk_freq[KGSL_AXI_HIGH_2D] = pdata->high_axi_2d;
-	if (kgsl_driver.g12_grp_clk) {
-		kgsl_driver.clk_freq[KGSL_2D_MIN_FREQ] =
-			clk_round_rate(kgsl_driver.g12_grp_clk,
-				       pdata->min_grp2d_freq);
-		kgsl_driver.clk_freq[KGSL_2D_MAX_FREQ] =
-			clk_round_rate(kgsl_driver.g12_grp_clk,
-				       pdata->max_grp2d_freq);
-	}
-	if (kgsl_driver.yamato_grp_clk) {
-		kgsl_driver.clk_freq[KGSL_3D_MIN_FREQ] =
-			clk_round_rate(kgsl_driver.yamato_grp_clk,
-				       pdata->min_grp3d_freq);
-		kgsl_driver.clk_freq[KGSL_3D_MAX_FREQ] =
-			clk_round_rate(kgsl_driver.yamato_grp_clk,
-				       pdata->max_grp3d_freq);
+	if (pdata) {
+		kgsl_driver.clk_freq[KGSL_AXI_HIGH_3D] = pdata->high_axi_3d;
+		kgsl_driver.clk_freq[KGSL_AXI_HIGH_2D] = pdata->high_axi_2d;
+		if (kgsl_driver.g12_grp_clk) {
+			kgsl_driver.clk_freq[KGSL_2D_MIN_FREQ] =
+				clk_round_rate(kgsl_driver.g12_grp_clk,
+					       pdata->min_grp2d_freq);
+			kgsl_driver.clk_freq[KGSL_2D_MAX_FREQ] =
+				clk_round_rate(kgsl_driver.g12_grp_clk,
+					       pdata->max_grp2d_freq);
+		}
+		if (kgsl_driver.yamato_grp_clk) {
+			kgsl_driver.clk_freq[KGSL_3D_MIN_FREQ] =
+				clk_round_rate(kgsl_driver.yamato_grp_clk,
+					       pdata->min_grp3d_freq);
+			kgsl_driver.clk_freq[KGSL_3D_MAX_FREQ] =
+				clk_round_rate(kgsl_driver.yamato_grp_clk,
+					       pdata->max_grp3d_freq);
+		}
 	}
 
 	pm_qos_add_requirement(PM_QOS_SYSTEM_BUS_FREQ, "kgsl_3d",
@@ -1949,6 +2007,18 @@
 	if (result != 0)
 		goto done;
 
+	kgsl_driver.ptsize = KGSL_PAGETABLE_ENTRIES(pdata->pt_va_size) *
+		KGSL_PAGETABLE_ENTRY_SIZE;
+	kgsl_driver.ptsize = ALIGN(kgsl_driver.ptsize, KGSL_PAGESIZE);
+
+	kgsl_driver.pt_va_size = pdata->pt_va_size;
+	kgsl_driver.ptpool.entries = pdata->pt_max_count;
+
+	result = kgsl_ptpool_init();
+
+	if (result != 0)
+		goto done;
+
 	result = kgsl_drm_init(pdev);
 
 	INIT_LIST_HEAD(&kgsl_driver.pagetable_list);
@@ -2004,6 +2074,8 @@
 static int kgsl_platform_remove(struct platform_device *pdev)
 {
 	pm_runtime_disable(&pdev->dev);
+
+	kgsl_ptpool_cleanup();
 	kgsl_driver_cleanup();
 	kgsl_drm_exit();
 	kgsl_device_unregister();
