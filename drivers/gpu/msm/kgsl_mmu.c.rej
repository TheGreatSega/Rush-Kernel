--- drivers/gpu/msm/kgsl_mmu.c
+++ drivers/gpu/msm/kgsl_mmu.c
@@ -1,4 +1,4 @@
-/* Copyright (c) 2002,2007-2010, Code Aurora Forum. All rights reserved.
+/* Copyright (c) 2002,2007-2011, Code Aurora Forum. All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 and
@@ -19,6 +19,7 @@
 #include <linux/mutex.h>
 #include <linux/spinlock.h>
 #include <linux/genalloc.h>
+#include <linux/bitmap.h>
 #ifdef CONFIG_MSM_KGSL_MMU
 #include <asm/pgalloc.h>
 #include <asm/pgtable.h>
@@ -41,10 +42,6 @@
 	unsigned int phyaddr:20;
 };
 
-#define GSL_PTE_SIZE	4
-#define GSL_PT_EXTRA_ENTRIES	16
-
-
 #define GSL_PT_PAGE_BITS_MASK	0x00000007
 #define GSL_PT_PAGE_ADDR_MASK	(~(KGSL_PAGESIZE - 1))
 
@@ -280,12 +333,13 @@
 
 	pagetable->refcnt = 1;
 
+	spin_lock_init(&pagetable->lock);
+	pagetable->tlb_flags = 0;
 	pagetable->name = name;
 	pagetable->va_base = mmu->va_base;
 	pagetable->va_range = mmu->va_range;
 	pagetable->last_superpte = 0;
-	pagetable->max_entries = (mmu->va_range >> KGSL_PAGESIZE_SHIFT)
-				 + GSL_PT_EXTRA_ENTRIES;
+	pagetable->max_entries = KGSL_PAGETABLE_ENTRIES(mmu->va_range);
 
 	pagetable->tlbflushfilter.size = (mmu->va_range /
 				(PAGE_SIZE * GSL_PT_SUPER_PTE * 8)) + 1;
@@ -311,16 +365,11 @@
 	}
 
 	/* allocate page table memory */
-	status = kgsl_sharedmem_alloc_coherent(&pagetable->base,
-				      pagetable->max_entries * GSL_PTE_SIZE);
+	status = kgsl_ptpool_get(&pagetable->base);
+
 	if (status != 0)
 		goto err_pool;
 
-	/* reset page table entries
-	 * -- all pte's are marked as not dirty initially
-	 */
-	kgsl_sharedmem_set(&pagetable->base, 0, 0, pagetable->base.size);
-
 	pagetable->base.gpuaddr = pagetable->base.physaddr;
 
 	status = kgsl_setup_pt(pagetable);
@@ -333,7 +382,7 @@
 	return pagetable;
 
 err_free_sharedmem:
-	kgsl_sharedmem_free(&pagetable->base);
+	kgsl_ptpool_put(&pagetable->base);
 err_pool:
 	gen_pool_destroy(pagetable->pool);
 err_flushfilter:
@@ -350,26 +399,24 @@
 
 	list_del(&pagetable->list);
 
-	if (pagetable) {
-		kgsl_cleanup_pt(pagetable);
-		if (pagetable->base.gpuaddr)
-			kgsl_sharedmem_free(&pagetable->base);
+	kgsl_cleanup_pt(pagetable);
 
-		if (pagetable->pool) {
-			gen_pool_destroy(pagetable->pool);
-			pagetable->pool = NULL;
-		}
+	kgsl_ptpool_put(&pagetable->base);
+	if (pagetable->base.gpuaddr)
+		kgsl_sharedmem_free(&pagetable->base);
 
-		if (pagetable->tlbflushfilter.base) {
-			pagetable->tlbflushfilter.size = 0;
-			kfree(pagetable->tlbflushfilter.base);
-			pagetable->tlbflushfilter.base = NULL;
-		}
-
-		kfree(pagetable);
+	if (pagetable->pool) {
+		gen_pool_destroy(pagetable->pool);
+		pagetable->pool = NULL;
+	}
 
+	if (pagetable->tlbflushfilter.base) {
+		pagetable->tlbflushfilter.size = 0;
+		kfree(pagetable->tlbflushfilter.base);
+		pagetable->tlbflushfilter.base = NULL;
 	}
-	KGSL_MEM_VDBG("return 0x%08x\n", 0);
+
+	kfree(pagetable);
 }
 
 struct kgsl_pagetable *kgsl_mmu_getpagetable(struct kgsl_mmu *mmu,
@@ -384,7 +431,9 @@
 
 	list_for_each_entry(pt,	&kgsl_driver.pagetable_list, list) {
 		if (pt->name == name) {
+			spin_lock(&pt->lock);
 			pt->refcnt++;
+			spin_unlock(&pt->lock);
 			mutex_unlock(&kgsl_driver.pt_mutex);
 			return pt;
 		}
@@ -398,13 +447,17 @@
 
 void kgsl_mmu_putpagetable(struct kgsl_pagetable *pagetable)
 {
-
+	bool dead;
 	if (pagetable == NULL)
 		return;
 
 	mutex_lock(&kgsl_driver.pt_mutex);
 
-	if (!--pagetable->refcnt)
+	spin_lock(&pagetable->lock);
+	dead = (--pagetable->refcnt) == 0;
+	spin_unlock(&pagetable->lock);
+
+	if (dead)
 		kgsl_mmu_destroypagetable(pagetable);
 
 	mutex_unlock(&kgsl_driver.pt_mutex);
@@ -425,6 +478,9 @@
 		KGSL_MEM_INFO("from %p to %p\n", mmu->hwpagetable, pagetable);
 		if (mmu->hwpagetable != pagetable) {
 			mmu->hwpagetable = pagetable;
+			spin_lock(&mmu->hwpagetable->lock);
+			mmu->hwpagetable->tlb_flags &= ~(1<<device->id);
+			spin_unlock(&mmu->hwpagetable->lock);
 
 			/* call device specific set page table */
 			status = kgsl_setstate(mmu->device,
@@ -472,8 +528,6 @@
 	BUG_ON(mmu->mpu_base & (KGSL_PAGESIZE - 1));
 	BUG_ON((mmu->mpu_base + mmu->mpu_range) & (KGSL_PAGESIZE - 1));
 
-	mmu->tlb_flags = 0;
-
 	/* sub-client MMU lookups require address translation */
 	if ((mmu->config & ~0x1) > 0) {
 		/*make sure virtual address range is a multiple of 64Kb */
@@ -639,11 +693,10 @@
 				unsigned int *gpuaddr,
 				unsigned int flags)
 {
-	int numpages, i;
+	int numpages;
 	unsigned int pte, ptefirst, ptelast, physaddr;
 	int flushtlb, alloc_size;
 	unsigned int align = flags & KGSL_MEMFLAGS_ALIGN_MASK;
-	struct kgsl_device *device;
 
 	KGSL_MEM_VDBG("enter (pt=%p, physaddr=%08x, range=%08d, gpuaddr=%p)\n",
 		      pagetable, address, range, gpuaddr);
@@ -700,6 +753,7 @@
 		((ptelast + 1) & (GSL_PT_SUPER_PTE-1)) != 0)
 		flushtlb = 1;
 
+	spin_lock(&pagetable->lock);
 	for (pte = ptefirst; pte < ptelast; pte++) {
 #ifdef VERBOSE_DEBUG
 		/* check if PTE exists */
@@ -726,6 +780,7 @@
 			KGSL_MEM_ERR
 			("Unable to find physaddr for address: %x\n",
 			     address);
+			spin_unlock(&pagetable->lock);
 			kgsl_mmu_unmap(pagetable, *gpuaddr, range);
 			return -EFAULT;
 		}
@@ -741,19 +796,12 @@
 	/* Invalidate tlb only if current page table used by GPU is the
 	 * pagetable that we used to allocate */
 	if (flushtlb) {
-		for (i = 0; i < kgsl_driver.num_devs; i++) {
-			device = kgsl_driver.devp[i];
-			if (device != NULL) {
-				if ((device->flags & KGSL_FLAGS_INITIALIZED) &&
-				    (pagetable == device->mmu.hwpagetable)) {
-					device->mmu.tlb_flags |=
-							KGSL_MMUFLAGS_TLBFLUSH;
-				}
-			}
-		}
+
+		/*set all devices as needing flushing*/
+		pagetable->tlb_flags = UINT_MAX;
 		GSL_TLBFLUSH_FILTER_RESET();
 	}
-
+	spin_unlock(&pagetable->lock);
 
 	KGSL_MEM_VDBG("return %d\n", 0);
 
@@ -782,6 +830,7 @@
 	KGSL_MEM_INFO("pt %p gpu %08x pte first %d last %d numpages %d\n",
 		      pagetable, gpuaddr, ptefirst, ptelast, numpages);
 
+	spin_lock(&pagetable->lock);
 	superpte = ptefirst - (ptefirst & (GSL_PT_SUPER_PTE-1));
 	GSL_TLBFLUSH_FILTER_SETDIRTY(superpte / GSL_PT_SUPER_PTE);
 	for (pte = ptefirst; pte < ptelast; pte++) {
@@ -797,6 +846,7 @@
 	}
 
 	mb();
+	spin_unlock(&pagetable->lock);
 
 	gen_pool_free(pagetable->pool, gpuaddr, range);
 
